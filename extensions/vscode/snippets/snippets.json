{
  "bloc": {
    "scope": "dart",
    "prefix": "bloc",
    "body": [
      "import 'package:bloc/bloc.dart';",
      "",
      "class ${1:MyBloc} extends Bloc<${2:MyEvent}, ${3:MyState}> {",
      "\t@override",
      "\t${3:MyState} get initialState => ${4:// TODO: implement initialState};",
      "",
      "\t@override",
      "\tStream<${3:MyState}> mapEventToState(",
      "\t\t${2:MyEvent} event,",
      "\t) async* {",
      "\t\t${5:// TODO: implement mapEventToState}",
      "\t}",
      "}"
    ]
  },
  "blocbuilder": {
    "scope": "dart",
    "prefix": "blocbuilder",
    "body": [
      "BlocBuilder<${1:MyBloc}, ${2:MyState}>(",
      "\tbuilder: (context, state) {",
      "\t\treturn ${3:Container();}",
      "\t},",
      ")"
    ]
  },
  "bloclistener": {
    "scope": "dart",
    "prefix": "bloclistener",
    "body": [
      "BlocListener<${1:MyBloc}, ${2:MyState}>(",
      "\tlistener: (context, state) {",
      "\t\t${3:// TODO: implement listener}",
      "\t},",
      "\tchild: ${4:Container()}",
      ")"
    ]
  },
  "multibloclistener": {
    "scope": "dart",
    "prefix": "multibloclistener",
    "body": [
      "MultiBlocListener(",
      "\tlisteners: [",
      "\t\tBlocListener<${1:MyBloc}, ${2:MyState}>(",
      "\t\t\tlistener: (context, state) {",
      "\t\t\t\t${3:// TODO: implement listener}",
      "\t\t\t},",
      "\t\t),",
      "\t\tBlocListener<${4:MyOtherBloc}, ${5:MyOtherState}>(",
      "\t\t\tlistener: (context, state) {",
      "\t\t\t\t${6:// TODO: implement listener}",
      "\t\t\t},",
      "\t\t),",
      "\t],",
      "\tchild: ${7:Container()},",
      ")"
    ]
  },
  "blocprovider": {
    "scope": "dart",
    "prefix": "blocprovider",
    "body": [
      "BlocProvider(",
      "\tcreate: (context) => ${1:MyBloc}(),",
      "\tchild: ${2:Container()},",
      ")"
    ]
  },
  "multiblocprovider": {
    "scope": "dart",
    "prefix": "multiblocprovider",
    "body": [
      "MultiBlocProvider(",
      "\tproviders: [",
      "\t\tBlocProvider<${1:MyBloc}>(",
      "\t\t\tcreate: (context) => ${1:MyBloc}(),",
      "\t\t),",
      "\t\tBlocProvider<${2:MyOtherBloc}>(",
      "\t\t\tcreate: (context) => ${2:MyOtherBloc}(),",
      "\t\t),",
      "\t],",
      "\tchild: ${3:Container()},",
      ")"
    ]
  },
  "repositoryprovider": {
    "scope": "dart",
    "prefix": "repositoryprovider",
    "body": [
      "RepositoryProvider(",
      "\tcreate: (context) => ${1:MyRepository}(),",
      "\tchild: ${2:Container()},",
      ")"
    ]
  },
  "multirepositoryprovider": {
    "scope": "dart",
    "prefix": "multirepositoryprovider",
    "body": [
      "MultiRepositoryProvider(",
      "\tproviders: [",
      "\t\tRepositoryProvider<${1:MyRepository}>(",
      "\t\t\tcreate: (context) => ${1:MyRepository}(),",
      "\t\t),",
      "\t\tRepositoryProvider<${3:MyOtherRepository}>(",
      "\t\t\tcreate: (context) => ${4:MyOtherRepository}(),",
      "\t\t),",
      "\t],",
      "\tchild: ${5:Container()},",
      ")"
    ]
  },
  "blocdelegate": {
    "scope": "dart",
    "prefix": "blocdelegate",
    "body": [
      "import 'package:bloc/bloc.dart';",
      "",
      "class ${1:MyBlocDelegate} extends BlocDelegate {",
      "\t@override",
      "\tvoid onEvent(Bloc bloc, Object event) {",
      "\t\tsuper.onEvent(bloc, event);",
      "\t\t${2:// TODO: implement onEvent}",
      "\t}",
      "",
      "\t@override",
      "\tvoid onError(Bloc bloc, Object error, StackTrace stacktrace) {",
      "\t\tsuper.onError(bloc, error, stacktrace);",
      "\t\t${3:// TODO: implement onError}",
      "\t}",
      "",
      "\t@override",
      "\tvoid onTransition(Bloc bloc, Transition transition) {",
      "\t\tsuper.onTransition(bloc, transition);",
      "\t\t${4:// TODO: implement onTransition}",
      "\t}",
      "}"
    ]
  },
  "blocstate": {
    "scope": "dart",
    "prefix": "blocstate",
    "body": [
      "import 'package:equatable/equatable.dart';",
      "",
      "abstract class $1State extends Equatable {",
      "\tconst $1State();",
      "}"
    ]
  },
  "blocevent": {
    "scope": "dart",
    "prefix": "blocevent",
    "body": [
      "import 'package:equatable/equatable.dart';",
      "",
      "abstract class $1Event extends Equatable {",
      "\tconst $1Event();",
      "}"
    ]
  }
}
