{
  "BlocBuilder": {
    "prefix": "blocbuilder",
    "body": [
      "BlocBuilder<${1:Subject}${2|Bloc,Cubit|}, $1State>(",
      "\tbuilder: (context, state) {",
      "\t\treturn ${3:Container()};",
      "\t},",
      ")"
    ]
  },
  "BlocListener": {
    "prefix": "bloclistener",
    "body": [
      "BlocListener<${1:Subject}${2|Bloc,Cubit|}, $1State>(",
      "\tlistener: (context, state) {",
      "\t\t${3:// TODO: implement listener}",
      "\t},",
      "\tchild: ${4:Container()},",
      ")"
    ]
  },
  "MultiBlocListener": {
    "prefix": "multibloclistener",
    "body": [
      "MultiBlocListener(",
      "\tlisteners: [",
      "\t\tBlocListener<${1:Subject}${2|Bloc,Cubit|}, $1State>(",
      "\t\t\tlistener: (context, state) {",
      "\t\t\t\t${3:// TODO: implement listener}",
      "\t\t\t},",
      "\t\t),",
      "\t\tBlocListener<${4:Subject}${5|Bloc,Cubit|}, $4State>(",
      "\t\t\tlistener: (context, state) {",
      "\t\t\t\t${6:// TODO: implement listener}",
      "\t\t\t},",
      "\t\t),",
      "\t],",
      "\tchild: ${7:Container()},",
      ")"
    ]
  },
  "BlocConsumer": {
    "prefix": "blocconsumer",
    "body": [
      "BlocConsumer<${1:Subject}${2|Bloc,Cubit|}, $1State>(",
      "\tlistener: (context, state) {",
      "\t\t${3:// TODO: implement listener}",
      "\t},",
      "\tbuilder: (context, state) {",
      "\t\treturn ${4:Container()};",
      "\t},",
      ")"
    ]
  },
  "BlocProvider": {
    "prefix": "blocprovider",
    "body": [
      "BlocProvider(",
      "\tcreate: (context) => ${1:Subject}${2|Bloc,Cubit|}(),",
      "\tchild: ${3:Container()},",
      ")"
    ]
  },
  "MultiBlocProvider": {
    "prefix": "multiblocprovider",
    "body": [
      "MultiBlocProvider(",
      "\tproviders: [",
      "\t\tBlocProvider(",
      "\t\t\tcreate: (context) => ${1:Subject}${2|Bloc,Cubit|}(),",
      "\t\t),",
      "\t\tBlocProvider(",
      "\t\t\tcreate: (context) => ${3:Subject}${4|Bloc,Cubit|}(),",
      "\t\t),",
      "\t],",
      "\tchild: ${5:Container()},",
      ")"
    ]
  },
  "RepositoryProvider": {
    "prefix": "repositoryprovider",
    "body": [
      "RepositoryProvider(",
      "\tcreate: (context) => ${1:Subject}Repository(),",
      "\tchild: ${2:Container()},",
      ")"
    ]
  },
  "MultiRepositoryProvider": {
    "prefix": "multirepositoryprovider",
    "body": [
      "MultiRepositoryProvider(",
      "\tproviders: [",
      "\t\tRepositoryProvider(",
      "\t\t\tcreate: (context) => ${1:Subject}Repository(),",
      "\t\t),",
      "\t\tRepositoryProvider(",
      "\t\t\tcreate: (context) => ${2:Subject}Repository(),",
      "\t\t),",
      "\t],",
      "\tchild: ${3:Container()},",
      ")"
    ]
  },
  "BlocObserver": {
    "prefix": "blocobserver",
    "body": [
      "import 'package:bloc/bloc.dart';",
      "",
      "class ${1:My}BlocObserver extends BlocObserver {",
      "\t@override",
      "\tvoid onEvent(Bloc bloc, Object event) {",
      "\t\t${2:// TODO: implement onEvent}",
      "\t\tsuper.onEvent(bloc, event);",
      "\t}",
      "",
      "\t@override",
      "\tvoid onError(Cubit cubit, Object error, StackTrace stacktrace) {",
      "\t\t${3:// TODO: implement onError}",
      "\t\tsuper.onError(cubit, error, stacktrace);",
      "\t}",
      "",
      "\t@override",
      "\tvoid onTransition(Bloc bloc, Transition transition) {",
      "\t\t${4:// TODO: implement onTransition}",
      "\t\tsuper.onTransition(bloc, transition);",
      "\t}",
      "}"
    ]
  },
  "context.bloc()": {
    "prefix": "bloc",
    "body": "context.bloc<${1:Subject}${2|Bloc,Cubit|}>()"
  },
  "BlocProvider.of()": {
    "prefix": "blocof",
    "body": "BlocProvider.of<${1:Subject}${2|Bloc,Cubit|}>(context)"
  },
  "context.repository()": {
    "prefix": "repository",
    "body": "context.repository<${1:Subject}Repository>()"
  },
  "RepositoryProvider.of()": {
    "prefix": "repositoryof",
    "body": "RepositoryProvider.of<${1:Subject}Repository>(context)"
  },
  "SubjectVerbState": {
    "prefix": "blocstate",
    "body": [
      "class ${1:Subject}${2:Verb}${3:State} extends $1State {",
      "\tconst $1$2$3($5);",
      "",
      "$4",
      "",
      "\t@override",
      "\tList<Object> get props => [$6];",
      "}"
    ],
    "description": "Subject + Verb (action) + State"
  },
  "SubjectInitial": {
    "prefix": "blocstateinitial",
    "body": "class ${1:Subject}Initial extends $1State {}",
    "description": "Subject + Initial"
  },
  "SubjectVerbInProgress": {
    "prefix": "blocstateinprogress",
    "body": "class ${1:Subject}${2:Verb}InProgress extends $1State {}",
    "description": "Subject + Verb (action) + InProgress"
  },
  "SubjectVerbSuccess": {
    "prefix": "blocstatesuccess",
    "body": [
      "class ${1:Subject}${2:Verb}Success extends $1State {",
      "\tconst $1$2Success($4);",
      "",
      "\t$3",
      "",
      "\t@override",
      "\tList<Object> get props => [$5];",
      "}"
    ],
    "description": "Subject + Verb (action) + Success"
  },
  "SubjectVerbFailure": {
    "prefix": "blocstatefailure",
    "body": [
      "class ${1:Subject}${2:Verb}Failure extends $1State {",
      "\tconst $1$2Failure(this.error);",
      "",
      "\tfinal Exception error;",
      "",
      "\t@override",
      "\tList<Object> get props => [error];",
      "}"
    ],
    "description": "Subject + Verb (action) + Failure"
  },
  "SubjectNounVerb": {
    "prefix": "blocevent",
    "body": [
      "class ${1:Subject}${2:Noun}${3:Verb} extends $1Event {",
      "\tconst $1$2$3($5);",
      "",
      "\t$4",
      "",
      "\t@override",
      "\tList<Object> get props => [$6];",
      "}"
    ],
    "description": "Subject + Noun (optional) + Verb (event)"
  },
  "SubjectStarted": {
    "prefix": "bloceventstarted",
    "body": "class ${1:Subject}Started extends $1Event {}",
    "description": "Subject + Started"
  }
}
