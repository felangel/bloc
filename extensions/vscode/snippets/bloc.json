{
  "Bloc": {
    "prefix": "bloc",
    "body": [
      "class ${1:Subject}Bloc extends Bloc<$1Event, $1State> {",
      "\t${1:Subject}Bloc() : super(${1:Subject}Initial()) {",
      "\t\ton<$1Event>((event, emit) {",
      "\t\t\t${2:// TODO: implement event handler}",
      "\t\t});",
      "\t}",
      "}"
    ]
  },
  "Cubit": {
    "prefix": "cubit",
    "body": [
      "class ${1:Subject}Cubit extends Cubit<$1State> {",
      "\t${1:Subject}Cubit() : super(${1:Subject}Initial());",
      "}"
    ]
  },
  "BlocObserver": {
    "prefix": "blocobserver",
    "body": [
      "import 'package:bloc/bloc.dart';",
      "",
      "class ${1:My}BlocObserver extends BlocObserver {",
      "\t@override",
      "\tvoid onEvent(Bloc bloc, Object? event) {",
      "\t\tsuper.onEvent(bloc, event);",
      "\t\t${2:// TODO: implement onEvent}",
      "\t}",
      "",
      "\t@override",
      "\tvoid onError(BlocBase bloc, Object error, StackTrace stackTrace) {",
      "\t\t${3:// TODO: implement onError}",
      "\t\tsuper.onError(bloc, error, stackTrace);",
      "\t}",
      "",
      "\t@override",
      "\tvoid onChange(BlocBase bloc, Change change) {",
      "\t\tsuper.onChange(bloc, change);",
      "\t\t${4:// TODO: implement onChange}",
      "\t}",
      "",
      "\t@override",
      "\tvoid onTransition(Bloc bloc, Transition transition) {",
      "\t\tsuper.onTransition(bloc, transition);",
      "\t\t${4:// TODO: implement onTransition}",
      "\t}",
      "}"
    ]
  },
  "Bloc State": {
    "prefix": "blocstate",
    "body": [
      "class ${1:Subject}${2:Verb}${3:State} extends $1State {",
      "\tconst $1$2$3($5);",
      "",
      "\t$4",
      "",
      "\t@override",
      "\tList<Object> get props => [$6];",
      "}"
    ],
    "description": "Subject + Verb (action) + State"
  },
  "Bloc Event": {
    "prefix": "blocevent",
    "body": [
      "class ${1:Subject}${2:Noun}${3:Verb} extends $1Event {",
      "\tconst $1$2$3($5);",
      "",
      "\t$4",
      "",
      "\t@override",
      "\tList<Object> get props => [$6];",
      "}"
    ],
    "description": "Subject + Noun (optional) + Verb (event)"
  },
  "Import package:bloc": {
    "prefix": "importbloc",
    "body": "import 'package:bloc/bloc.dart';",
    "description": "import package:bloc/bloc.dart;"
  },
  "Register Event Handler": {
    "prefix": "onevent",
    "body": [
      "on<${1:${TM_FILENAME_BASE/(.*)(?=_bloc)(_bloc)/${1:/pascalcase}/g}Event}>((event, emit) {",
      "\t${2:// TODO: implement event handler}",
      "});"
    ],
    "description": "Register a new EventHandler"
  },
  "Define Event Handler": {
    "prefix": "_onevent",
    "body": [
      "${1|void,Future<void>|} _on${2:Event}(",
      "\t$2 event,",
      "\tEmitter<${3:${TM_FILENAME_BASE/(.*)(?=_bloc)(_bloc)/${1:/pascalcase}/g}State}> emit,",
      ") ${4:async} {",
      "\t${5:// TODO: implement event handler}",
      "}"
    ],
    "description": "Define a new EventHandler"
  }
}
