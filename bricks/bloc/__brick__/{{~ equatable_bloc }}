import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';

part '{{name.snakeCase()}}_event.dart';
part '{{name.snakeCase()}}_state.dart';

class {{name.pascalCase()}}Bloc extends Bloc<{{name.pascalCase()}}Event, {{name.pascalCase()}}State> {
  {{name.pascalCase()}}Bloc() : super(const {{name.pascalCase()}}{{initial_state.pascalCase()}}()) {
    {{#has_events}}{{> on_events }}{{/has_events}}{{^has_events}}{{> on_event }}{{/has_events}}    
  }{{#has_events}}
  {{#events}}
  Future<void> _on{{name.pascalCase()}}{{..pascalCase()}}(
    {{name.pascalCase()}}{{..pascalCase()}} event,
    Emitter<{{name.pascalCase()}}State> emit,
  ) async {
    // TODO: handle {{name.pascalCase()}}{{..pascalCase()}}.
  }
  {{/events}}{{/has_events}}
}
